// iterative search:
fun <T : Comparable<T>> Array<T>.binarySearch(target: T): Int {
    var hi = size - 1
    var lo = 0
    while (hi >= lo) {
        val guess = lo + (hi - lo) / 2
        if (this[guess] > target)
            hi = guess - 1
        else if (this[guess] < target)
            lo = guess + 1
        else
            return guess
    }
    return -1
}

// recursive search:
fun <T : Comparable<T>> Array<T>.binarySearch(target: T, lo: Int, hi: Int): Int {
    if (hi < lo)
        return -1
    val guess = (hi + lo) / 2
    return if (this[guess] > target)
        binarySearch(target, lo, guess - 1)
    else if (this[guess] < target)
        binarySearch(target, guess + 1, hi)
    else
        guess
}

fun main(args: Array<String>) {
    val a = intArrayOf(1, 3, 4, 5, 6, 7, 8, 9, 10)
    var t = 6  // target
    var r = a.binarySearch(t)
    println(if (r < 0) "$t not found" else "$t found at index $r")
    t = 250
    r = a.binarySearch(t)
    println(if (r < 0) "$t not found" else "$t found at index $r")

    t = 6
    r = a.binarySearch(t, 0, a.size)
    println(if (r < 0) "$t not found" else "$t found at index $r")
    t = 250
    r = a.binarySearch(t, 0, a.size)
    println(if (r < 0) "$t not found" else "$t found at index $r")
}

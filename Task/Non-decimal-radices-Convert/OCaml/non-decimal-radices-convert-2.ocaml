let to_base b v =
  let rec to_base' a v =
    if v = 0 then
      a
    else
      to_base' (v mod b :: a) (v / b)
  in
    to_base' [] v

let from_base b ds =
  List.fold_left (fun n k -> n * b + k) 0 ds

let to_alpha_digit n =
  if n < 10 then
    char_of_int (n + int_of_char '0')
  else
    char_of_int (n + int_of_char 'a' - 10)

let to_alpha_digits ds =
  let buf = Buffer.create (List.length ds) in
    List.iter (fun i -> Buffer.add_char buf (to_alpha_digit i)) ds;
    Buffer.contents buf

let from_alpha_digit c = match c with
    '0'..'9' -> int_of_char c - int_of_char '0'
  | 'A'..'Z' -> int_of_char c - int_of_char 'A' + 10
  | 'a'..'z' -> int_of_char c - int_of_char 'a' + 10

let from_alpha_digits s =
  let result = ref [] in
    String.iter (fun c -> result := from_alpha_digit c :: !result) s;
    List.rev !result

#!/bin/bash

#Author: Stefanos Georgiou from Athens University of Business and Economics
#This work is done for the purpose of comparing power consumption of different languages

#This script file receives as a command-line parameter a file (that has a number of tasks which is an output of compileTasks and shows the successfully compiled files) and executes the languages given to it (again as command-line arguments)

#The specific script uses ssh to connect with a remote host (Raspberry Pi 3b in our case) that retrieves energy-related measurements via Watts Up Pro.
#Watts Up pro makes use of USB interfaces and retrieves energy measurements and stores them on the remote host

if [ "$#" -eq 0 ] || [ "$#" -lt 4 ];
then
	echo ""
	echo "Illegal number of command line arguments!"
	echo "Use --help for more information."
	echo ""
	exit
fi

if [ "$1" == "--help" ];
then
	echo ""
	echo "\$1 -> Full path of the file where all the tasks are located."
	echo "\$2 -> The sleep time between tasks execution in different programming languages,"
	echo "      e.g., 1s for one second 2m for two minutes 3h for three hours."
	echo "      This parameter acts as a safe guard to reduce noise among the executions."
	echo "\$3 -> Provide username for remote host (this parameter can be used if a wattsup power"
	echo "      analyzer is attached to the remote host  to retrieve energy measurements)"
	echo "\$4 -> Provide IP address for remote host."
	echo " "
	echo "Note: user are suggested to set up a passwordless ssh between the local and the remote"
	echo "host"
	echo " "
	exit
fi

#################################################################################################################################################################################################################### 													FUNCTIONS												#################################################################################################################################################################################################################
#Function that checks if the executable is still running, if not it terminates the wattsup process.
function killWattsUpProcess {

	#While $1 (which is the executable) is still running sleep
	while  ps -p $1 > /dev/null ;
	do
		sleep 1
	done
	
	#If it's outside the loop it means the $1 is not running, then kill $2
	kill -9 $2
}

#Check via if the give host is running
function checkRemoteHostSSH {

	#Check if nmap exist on the host, otherwise recommend to install it
	if nmap --version | grep "command not found"; then
		echo "Nmap not found in local host."
		echo "Please install nmap before procceding any further."
		echo "Exiting..."
		exit
	fi

	if nmap -p22 $2 -oG - | grep -q 22/open; then 
    		echo "Remote Host's $2 SSH is active"
		echo "Procceding normally..."
		echo " "
	else 
    		echo "Remote Host's $2 SSH is not running..."
		echo "Please make sure that is active and try again."
		exit
	fi
}

#Get files from remote server using scp
function getTreeDirectoryFromRemoteHost {

	#\$1 is the remote host's username
	#\$2 is the remote host's IP address
	#\$3 is the location of remote host the directory
	#\$4 is the location of the host for storing the energy-related data

	echo "Retrieving data from remote host:$2 please wait..."
	remoteHost=$1@$2
	# Get till Energy_Results
	scp -r $remoteHost:$3 $4
	echo "[Success] Transfer done!"

	echo ""
	echo "Exiting..."
}

############################################################################################################################################

#Create parameters for the directory names
EnergyPerformanceLogDataDate=$(date -u | sed -e 's/ /_/g')
EnergyPerformanceLogDirName="Experiment_Data_"$EnergyPerformanceLogDataDate

#Before creating directories check if the remote host is acticvated and SSH is running
	checkRemoteHostSSH $3 $4

	#if the script is still running it means ssh connection is fine.
	mkdir -p ../Reports/$EnergyPerformanceLogDirName
	mkdir -p ../Reports/$EnergyPerformanceLogDirName/Energy_Results
	remoteHost=$3"@"$4
	ssh $remoteHost mkdir -p GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName
	ssh $remoteHost mkdir -p GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results
	if [ $? -eq 0 ];
       	then
		echo "Directories created normally."
	else
		echo "Failed to create directories."
		echo "Please check remote host's permissions."
		exit
	fi

#Create Performance locally since the execution is done here.
mkdir -p ../Reports/$EnergyPerformanceLogDirName/Performance_Results

#At this point we have a file that includes all the Tasks we successfully compiled
for containesTasks in `ls $1`;
do
	#At this point we create a directory to store the energy and performance results
	#If a remove host is given, then create the energy results there
	ssh $remoteHost mkdir -p GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks
	mkdir -p ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks

	#For all the programming languages enter and compile the content
        for containesLanguages in `ls $1/$containesTasks`;
        do
                #For all the tasks compile them based on the language
		for tasksImplementation in `ls $1/$containesTasks/$containesLanguages`;
                do
			
			case "$containesLanguages" in
				("c") 
					if [[ $tasksImplementation != *".c" ]];
					then
						echo "Executing C"
						#A second of delay since the wattsup has it as a startup delay
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/c.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/c.txt

						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/c.txt' &" &
						
						#Watts Up utility has 2 seconds of delay before start capturing measurements, thus we delay the execution system too				
						sleep 2

						executable=$1/$containesTasks/$containesLanguages/$tasksImplementation
						(time ./$executable) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/c.txt &
						
						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
							
						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution		$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:C" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
						
					fi
				
				;;
				("c++")
					if [[ $tasksImplementation != *".cpp" ]];
					then
						echo "Executing C++"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/c++.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/c++.txt

						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/c++.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						executable=$1/$containesTasks/$containesLanguages/$tasksImplementation
						(time ./$executable) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/c++.txt &
						
						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!
		
						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
						
						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution		$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:C++" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
					fi
				;;
				("java")
					if [[ $tasksImplementation != *".java" ]];
					then
						echo "Executing Java"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/java.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/java.txt

						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/java.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2

						path=$1/$containesTasks/$containesLanguages/
						executable=$(echo "$1/$containesTasks/$containesLanguages/$tasksImplementation" | awk -F "/" '{print $NF}' | awk -F "." '{print $1}') 
						(time java -classpath $path $executable) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/java.txt &
						
						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!
		
						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
						
						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution		$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:Java" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
					fi
				;;
				("python")
						echo "Executing Python"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/python.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/python.txt
					
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/python.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time python $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/python.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!
		
						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
						
						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution		$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:Python" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
				;;
				("c-sharp")
					if [[ $tasksImplementation == *".exe" ]]; 
					then
						echo "Executing C#"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/c-sharp.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/c-sharp.txt
					
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/c-sharp.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time mono $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/c-sharp.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!
	
						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
		
						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution		$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:C-Sharp" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
					fi
				;;
				("visual-basic-.net")
					if [[ $tasksImplementation == *".exe" ]];
					then
						echo "Executing VB.NET"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/vb.net.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/vb.net.txt
					
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/vb.net.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time mono $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/vb.net.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						

						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution		$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:Visual-Basic-.Net" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
					fi
				;;

				("javascript")
						echo "Executing JavaScript"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/javascript.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/javascript.txt
				
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/javascript.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time node -max_old_space_size=4096 $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/javascript.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
	
						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution		$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:JavaScript" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
				;;
				("php")
						echo "Executing Php"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/php.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/php.txt
				
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/php.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time php $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/php.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						

						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution		$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:PHP" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
				;;
				("perl")
						echo "Executing Perl"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/perl.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/perl.txt
				
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/perl.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time perl $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/perl.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
	
						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution			$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:Perl" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
				;;
				("ruby")
						echo "Executing Ruby" 
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/ruby.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/ruby.txt
				
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/ruby.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time ruby $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/ruby.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
					
						if [ $? -eq 0 ];
						then
							timeStamp=$(date -u)
							echo "Execution		$timeStamp	$1/$containesTasks/$containesLanguages/$tasksImplementation:Ruby" >> ../Reports/Failed_Execution_Report.txt
						fi
						sleep $2
				;;
				("r")
						echo "Executing R"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/r.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/r.txt
				
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/r.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time Rscript $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/r.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
  
                                                if [ $? -eq 0 ];
                                                then
                                                        timeStamp=$(date -u)
                                                        echo "Execution         	$timeStamp      $1/$containesTasks/$containesLanguages/$tasksImplementation:R" >> ../Reports/Failed_Execution_Report.txt
                                                fi
					sleep $2
				;;
				("go")
						echo "Executing Go"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/go.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/go.txt
				
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/go.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time go run $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/go.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
                         
			                        if [ $? -eq 0 ];
                                                then
                                                        timeStamp=$(date -u)
                                                        echo "Execution         $timeStamp      $1/$containesTasks/$containesLanguages/$tasksImplementation:Go" >> ../Reports/Failed_Execution_Report.txt
                                                fi
					sleep $2
				;;
				("rust")		
					if [[ $tasksImplementation != *".rust" ]]; 
					then
						echo "Executing Rust"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/rust.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/rust.txt
				
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/rust.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time ./$1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/rust.txt &
				
						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
                                                
						if [ $? -eq 0 ];
                                                then
                                                        timeStamp=$(date -u)
                                                        echo "Execution         $timeStamp      $1/$containesTasks/$containesLanguages/$tasksImplementation:Rust" >> ../Reports/Failed_Execution_Report.txt
                                                fi
					sleep $2
					fi
				;;
				("swift")		
						echo "Executing Swift"
						ssh $remoteHost touch GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/swift.txt
						touch  ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/swift.txt
				
						#Run the wattsup in the background
						ssh $remoteHost "sh -c 'sudo ./GitHub/Rosetta-Code-Research/watts-up/wattsup ttyUSB0 -r watts >> GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results/$containesTasks/swift.txt' &" &
						
						#WattsUp has 2 seconds of delay before retrieving results
						sleep 2
						
						(time swift $1/$containesTasks/$containesLanguages/$tasksImplementation) 2>> ../Reports/$EnergyPerformanceLogDirName/Performance_Results/$containesTasks/swift.txt &

						#Get executions PID, when this process is not runnung, kill the wattsUpPro process
						getExecutionPID=$!

						#While our tasks is still running sleep a second and start again
						while  ps -p $getExecutionPID > /dev/null ;
						do
							sleep 1
						done
	
						#If it's outside the loop it means the task's execution is finished, then stop remote host 
						#from retrieving power measurements
						ssh $remoteHost sudo pkill  wattsup						
                                                
						if [ $? -eq 0 ];
                                                then
                                                        timeStamp=$(date -u)
                                                        echo "Execution         $timeStamp      $1/$containesTasks/$containesLanguages/$tasksImplementation:Swift" >> ../Reports/Failed_Execution_Report.txt
                                                fi
					sleep $2
				;;
			esac
		done
	done
done

#Testing transferring
getTreeDirectoryFromRemoteHost $3 $4 GitHub/Rosetta-Code-Research/Reports/$EnergyPerformanceLogDirName/Energy_Results ../Reports/$EnergyPerformanceLogDirName/


exit

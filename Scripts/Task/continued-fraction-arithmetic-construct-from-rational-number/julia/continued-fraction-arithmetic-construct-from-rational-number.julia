# It's most appropriate to define a Julia iterable object for this task
# Julia doesn't have Python's yield, the closest to it is produce/consume calls with Julia tasks
# but for various reasons they don't work out for this task
# This solution works with two integers, a Julia rational or a real

type R2cf
n1::Union{Int,Float64} # numerator or real
n2::Int # denominator or 1 if real
t1::Int # generated coefficient
f::Float64 # aux. field for working with real inputs
end

# constructors for all possible input types
R2cf(n::Union{Int,Float64})=R2cf(n,1,0,0.1)
R2cf(n1::Int,n2::Int)=R2cf(n1,n2,0,0.1)
R2cf(r::Rational{Int})=R2cf(num(r),den(r),0,0.1)

# methods to make our object iterable
Base.start(::R2cf)=nothing

# generates the next coefficient
function Base.next(cf::R2cf,s)
if typeof(cf.n1)==Int
cf.n1, (cf.t1, cf.n2) = cf.n2, divrem(cf.n1, cf.n2)
else
cf.t1,cf.f=divrem(cf.n1,1)
if cf.f!=0.0 cf.n1=1/cf.f end
end
return (cf.t1,nothing)
end

# returns true if we've prepared the continued fraction
function Base.done(cf::R2cf,s)
if typeof(cf.n1)==Int
return cf.n2==0
else
return cf.f==0.0
end
end

# tell Julia that this object always returns ints (all coeffs are integers)
Base.eltype(::Type{R2cf})=Int

# overload the default collect function so that we can collect the first maxiter coeffs of infinite continued fractions
# array slicing doesn't work as Julia crashes before the slicing due to our infinitely long array
function Base.collect(itr::R2cf,maxiter::Int)
r=Array{Int,1}() # all results are ints
i=1
for v=itr
push!(r,v)
i+=1
if i==maxiter break end
end
return r
end

# test cases according to task description with outputs in comments
println(collect(R2cf(1,2)))    # => [0, 2]
println(collect(R2cf(3,1)))    # => [3]
println(collect(R2cf(23,8)))    # => [2, 1, 7]
println(collect(R2cf(13,11)))    # => [1, 5, 2]
println(collect(R2cf(22,7)))    # => [3, 7]
println(collect(R2cf(14142,10000)))    # => [1, 2, 2, 2, 2, 2, 1, 1, 29]
println(collect(R2cf(141421,100000)))    # => [1, 2, 2, 2, 2, 2, 2, 3, 1, 1, 3, 1, 7, 2]
println(collect(R2cf(1414214,1000000)))    # => [1, 2, 2, 2, 2, 2, 2, 2, 3, 6, 1, 2, 1, 12]
println(collect(R2cf(14142136,10000000)))    # => [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 1, 2, 4, 1, 1, 2]

println(collect(R2cf(13//11)))    # => [1, 5, 2]
println(collect(R2cf(2 ^ 0.5), 20))    # => [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

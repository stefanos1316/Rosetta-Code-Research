integer
dist(text s, integer i, integer ls, text t, integer j, integer lt, list d)
{
    integer x;

    x = l_q_integer(d, i * (lt + 1) + j);
    if (x == -1) {
        if (i == ls) {
            x = lt - j;
        } elif (j == lt) {
            x = ls - i;
        } elif (s[i] == t[j]) {
            x = dist(s, i + 1, ls, t, j + 1, lt, d);
        } else {
            x = dist(s, i + 1, ls, t, j + 1, lt, d);
            x = min(x, dist(s, i, ls, t, j + 1, lt, d));
            x = min(x, dist(s, i + 1, ls, t, j, lt, d));

            x += 1;
        }

        l_r_integer(d, i * (lt + 1) + j, x);
    }

    return x;
}

integer
levenshtein(text s, text t)
{
    integer i, ls, lt;
    list d;

    ls = length(s);
    lt = length(t);

    i = (ls + 1) * (lt + 1);
    while (i) {
        lb_p_integer(d, -1);
        i -= 1;
    }

    return dist(s, 0, ls, t, 0, lt, d);
}

integer
main(void)
{
    text s1, s2;

    s1 = "rosettacode";
    s2 = "raisethysword";

    o_form("distance between `~' and `~' is ~\n", s1, s2, levenshtein(s1, s2));

    return 0;
}

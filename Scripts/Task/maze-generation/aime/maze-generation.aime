void
grid_maze(data b, integer N)
{
    data d;
    integer i, j;

    j = N;
    while (j) {
	b_suffix(d, "+---");
	j -= 1;
    }
    {
	b_suffix(d, "+\n");
    }

    j = N;
    while (j) {
	b_suffix(d, "| * ");
	j -= 1;
    }
    {
	b_suffix(d, "|\n");
    }

    i = N;
    while (i) {
	b_extend(b, d);

	i -= 1;
    }

    b_size(d, N * 4 + 2);

    {
	b_extend(b, d);
    }
}

void
walk_cell(data b, integer N, integer line_size, integer x, integer y,
	  list x_offsets, list y_offsets)
{
    integer i, r;

    b_replace(b, y + x, ' ');

    r = drand(3);

    i = 0;
    while (i < 4) {
	integer p, q;

	p = x + l_q_integer(x_offsets, (r + i) & 3);
	q = y + l_q_integer(y_offsets, (r + i) & 3);

	if (-1 < p && p < line_size
	    && -1 < q && q < line_size * (N * 2 + 1)) {
	    if (b_text(b, q + p) == '*') {
		walk_cell(b, N, line_size, p, q, x_offsets, y_offsets);
		b_replace(b, (q + y) / 2 + (p + x) / 2, ' ');
		if (p == x) {
		    b_replace(b, (q + y) / 2 + p - 1, ' ');
		    b_replace(b, (q + y) / 2 + p + 1, ' ');
		}
	    }
	}

	i += 1;
    }
}

void
walk_maze(data b, integer N)
{
    integer line_size, x, y;
    list x_offsets, y_offsets;

    line_size = N * 4 + 1 + 1;

    lb_p_integer(x_offsets, 4);
    lb_p_integer(y_offsets, 0);
    lb_p_integer(x_offsets, 0);
    lb_p_integer(y_offsets, line_size * 2);
    lb_p_integer(x_offsets, -4);
    lb_p_integer(y_offsets, 0);
    lb_p_integer(x_offsets, 0);
    lb_p_integer(y_offsets, line_size * -2);

    x = drand(N - 1) * 4 + 2;
    y = line_size * (drand(N - 1) * 2 + 1);

    walk_cell(b, N, line_size, x, y, x_offsets, y_offsets);
}

integer
main(void)
{
    data b;
    integer N;

    N = 10;

    grid_maze(b, N);

    walk_maze(b, N);

    o_text(b_string(b));

    return 0;
}

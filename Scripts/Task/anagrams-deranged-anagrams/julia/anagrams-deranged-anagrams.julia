import Base.isless

#Let's define the less than operator for any two vectors that have the same type
# This does lexicographic comparison, we use it on vectors of chars in this task

function isless{T}(t1::Array{T,1}, t2::Array{T,1})
    n1, n2 = length(t1), length(t2)
    for i = 1:min(n1, n2)
        a, b = t1[i], t2[i]
        if !isequal(a, b)
            return isless(a, b)
        end
    end
    return n1 < n2
end

#The sort function of Julia doesn't work on strings, so we write one
# This returns a sorted vector of the chars of the given string

sortchars(s)=sort(convert(Array{Char,1},s))

# Custom comparator function for sorting the loaded wordlist

function sort_ana(s1,s2)
if length(s1)!=length(s2) return length(s1)<length(s2) end
sortchars(s1)<sortchars(s2)
end

# Tests if two strings are deranged anagrams, returns a bool
# in our case s2 is never longer than s1

function deranged(s1,s2)
# Tests for derangement first
for i=1:length(s2)
if s1[i]==s2[i] return false end
end
# s1 and s2 are deranged, but are they anagrams at all?
return sortchars(s1)==sortchars(s2)
end

# Task starts here, we load the wordlist line by line, strip eol char, and sort the wordlist
# in a way that ensures that longer words come first and anagrams go next to each other
# Powerful construct, isn't it?
words=sort(
map(chomp,open(readlines,"unixdict.txt")),
rev=true,lt=sort_ana
)

# Now we just look for deranged anagrams in the neighbouring words of the sorted wordlist
for i=1:length(words)-1
if deranged(words[i],words[i+1])
# The first match is guaranteed to be the longest due to the custom sorting
println("The longest deranged anagrams are $(words[i]) and $(words[i+1])")
break
end
end

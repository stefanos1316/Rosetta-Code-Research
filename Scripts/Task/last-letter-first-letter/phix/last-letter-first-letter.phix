constant words = {"audino","bagon","baltoy","banette","bidoof","braviary","bronzor","carracosta","charmeleon","cresselia","croagunk",
                  "darmanitan","deino","emboar","emolga","exeggcute","gabite","girafarig","gulpin","haxorus","heatmor","heatran",
                  "ivysaur","jellicent","jumpluff","kangaskhan","kricketune","landorus","ledyba","loudred","lumineon","lunatone",
                  "machamp","magnezone","mamoswine","nosepass","petilil","pidgeotto","pikachu","pinsir","poliwrath","poochyena",
                  "porygon2","porygonz","registeel","relicanth","remoraid","rufflet","sableye","scolipede","scrafty","seaking",
                  "sealeo","silcoon","simisear","snivy","snorlax","spoink","starly","tirtouga","trapinch","treecko","tyrogue",
                  "vigoroth","vulpix","wailord","wartortle","whismur","wingull","yamask"}

function word_chains()
sequence first = repeat(0,256),             -- start of chains for a given letter
                                            -- first['a']=1, first['b']=2, first['c']=8, etc.
         snext = repeat(0,length(words))    -- chains of words starting with the same letter
                                            -- a: snext[1]=0, b: snext[2..7]={3,4,5,6,7,0}, etc.
    for i=1 to length(words) do
        integer ch = words[i][1]
        if first[ch]=0 then
            first[ch] = i
        end if
        for j=i+1 to length(words) do
            if words[j][1]=ch then
                snext[i] = j
                exit
            end if
        end for
    end for
    return {first,snext}
end function

constant {first,snext} = word_chains()

-- maintain words already taken as a linked list:
integer tstart
sequence taken = repeat(0,length(words))    -- 0=no, -1=end of chain, +ve=next

-- and keep a copy of the best for later
integer bstart
sequence best
integer maxn = 0
integer count

procedure try(integer ch, integer last, integer n)
    integer next = first[ch]
    while next!=0 do
        if taken[next]=0 then
            taken[last] = next
            taken[next] = -1
            try(words[next][$],next,n+1)
            taken[last] = -1
            taken[next] = 0
        end if
        next = snext[next]
    end while
    if n>maxn then
        bstart = tstart
        best = taken
        maxn = n
        count = 1
    elsif n=maxn then
        count += 1
    end if
end procedure

atom t0=time()

for i=1 to length(words) do
    tstart = i
    taken[i] = -1
    try(words[i][$],i,1)
    taken[i] = 0
end for

printf(1,"Runtime: %2.3f seconds. Max length:%d, found %d of such, one of which is:\n",{time()-t0,maxn,count})
while 1 do
    printf(1,"%s ",words[bstart])
    bstart = best[bstart]
    if bstart=-1 then exit end if
end while

// Type alias for function that returns true if arguments should be swapped
type OrderFunc<T> = Fn(&T, &T) -> bool;

fn main() {
    // Sort numbers
for j in 0..1000000 { 
   let mut numbers = [16,93,-99,95,-96,-24,-53,-71,96,-66,-21,72,-12,-32,-96,62,-42,-50,49,53,-65,52,-25,-69,88,-43,60,66,-94,-69,53,-71,-17,-58,-30,32,-16,-94,-42,-86,59,-53,94,97,-12,15,65,-35,-12,-82,-82,48,-48,66,-42,-63,33,-49,41,-85,94,66,-60,60,-65,-73,-50,-9,-48,-3,15,-77,81,95,-93,83,-21,34,-78,-61,-22,-58,65,78,41,-7,-59,20,88,-38,-15,-69,42,97,-35,61,8,2,-22,-85];
    quick_sort(&mut numbers, &is_less);
}

}


// Example OrderFunc which is used to order items from least to greatest
#[inline(always)]
fn is_less<T: Ord>(x: &T, y: &T) -> bool {
    x < y
}

fn quick_sort<T>(v: &mut [T], f: &OrderFunc<T>) {

    let len = v.len();
    if len < 2 {
        return;
    }

    let pivot_index = partition(v, f);

    // Sort the left side
    quick_sort(&mut v[0..pivot_index], f);

    // Sort the right side
    quick_sort(&mut v[pivot_index + 1..len], f);
}

fn partition<T>(v: &mut [T], f: &OrderFunc<T>) -> usize {
    let len = v.len();
    let pivot_index = len / 2;

    v.swap(pivot_index, len - 1);

    let mut store_index = 0;
    for i in 0..len - 1 {
        if f(&v[i], &v[len - 1]) {
            v.swap(i, store_index);
            store_index += 1;
        }
    }

    v.swap(store_index, len - 1);
    store_index
}

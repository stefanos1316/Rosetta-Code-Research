@inproceedings{abdulsalam_program_2014,
	title = {Program energy efficiency: {The} impact of language, compiler and implementation choices},
	shorttitle = {Program energy efficiency},
	doi = {10.1109/IGCC.2014.7039169},
	abstract = {Today reducing the energy usage of computing systems becomes a paramount task, no matter they are lightweight mobile devices, complex cloud computing platforms or large-scale supercomputers. Many existing studies in green computing focus on making the hardware more energy efficient. This is understandable because software running on low-power hardware will automatically consume less energy. Little work has been done to explore how software developers can play a more proactive role in saving energy by writing greener code. In fact, very few programmers consider energy-efficiency when writing code and even fewer know how to evaluate and improve the energy-efficiency of their code. In this paper, we quantitatively study the impact of languages (C/C++/Java/Python), compiler optimization (GNU C/C++ compiler with O1, O2, and O3 flags) and implementation choices (e.g. using malloc instead of new to create dynamic arrays and using vector vs. array for Quicksort) on the energy-efficiency of three well-known programs: Fast Fourier Transform, Linked List Insertion/Deletion and Quicksort. Our experiments show that by carefully selecting an appropriate language, optimization flag and data structure, significant energy can be conserved for solving the same problem with identical input size.},
	booktitle = {Green {Computing} {Conference} ({IGCC}), 2014 {International}},
	author = {Abdulsalam, S. and Lakomski, D. and Gu, Q. and Jin, T. and Zong, Z.},
	month = nov,
	year = {2014},
	keywords = {Arrays, code energy-efficiency, compiler choices, compiler optimization, complex cloud computing platforms, computing system energy usage reduction, data structure, data structures, dynamic arrays, energy-efficient programming, fast Fourier transform, fast Fourier transforms, green computing, greener code writing, implementation choices, Java, language choices, large-scale supercomputers, Libraries, light-weight mobile devices, linked list insertion-deletion, Optimization, optimization flag, power aware computing, program compilers, program energy efficiency, programming languages, Quicksort, Resource management, Software, software developers, software optimization, sorting, Vectors},
	pages = {1--6},
	file = {2016-11-10.txt:/home/sgeorgiou/.zotero/zotero/ut65aj2m.default/zotero/storage/84C2DUIK/2016-11-10.txt:text/plain;IEEE Xplore Abstract Record:/home/sgeorgiou/.zotero/zotero/ut65aj2m.default/zotero/storage/GWD92KNM/7039169.html:text/html;IEEE Xplore Full Text PDF:/home/sgeorgiou/.zotero/zotero/ut65aj2m.default/zotero/storage/867HFR99/Abdulsalam et al. - 2014 - Program energy efficiency The impact of language,.pdf:application/pdf}


@inproceedings{chen_android_2016,
	title = {Android {App} {Energy} {Efficiency}: {The} {Impact} of {Language}, {Runtime}, {Compiler}, and {Implementation}},
	shorttitle = {Android {App} {Energy} {Efficiency}},
	doi = {10.1109/BDCloud-SocialCom-SustainCom.2016.77},
	abstract = {With millions of smart phones being purchased every year, the number of mobile applications that have been developed and installed keeps growing substantially. In 2016, Android-based phones dominate the market with 80.7\% of market share and there are over 1.6 million apps in Google Play. The battery power limitation requires each app to reduce its impact on the battery life. Existing research and practices focus on how to optimize battery life by reducing network battery drain, judiciously turning off or dimming screens, dynamically adjusting CPU frequency of inactive apps, and changing app behaviors based on different battery states. These studies have greatly helped to improve the energy efficiency of Android apps. However, very few work has been conducted to analyze the impact of programming languages, compilers, runtime, and implementation choices on power consumption of Android apps, which is equally important for Android app developers to write more energy efficient code. This paper addresses the aforementioned problems by making the following contributions: 1) we develop the Android Energy Profiler (AEP) to measure the detailed power consumption of various Android apps, 2) we analyze the impact of different languages (C/C++/Java) and compiler optimization on energy consumption, 3) we study the impact of different Android system runtimes (ART vs. Dalvik) on energy efficiency, 4) we evaluate the impact of implementation choices (recursion vs. iteration and serial vs. parallel) on energy efficiency, and 5) we verify if thin client design can always lead to better energy efficiency.},
	booktitle = {2016 {IEEE} {International} {Conferences} on {Big} {Data} and {Cloud} {Computing} ({BDCloud}), {Social} {Computing} and {Networking} ({SocialCom}), {Sustainable} {Computing} and {Communications} ({SustainCom}) ({BDCloud}-{SocialCom}-{SustainCom})},
	author = {Chen, X. and Zong, Z.},
	month = oct,
	year = {2016},
	keywords = {Batteries, Energy consumption, Google, Power demand, Power measurement, Runtime, smart phones},
	pages = {485--492},
	file = {2016-11-11.txt:/home/sgeorgiou/.zotero/zotero/ut65aj2m.default/zotero/storage/94VVHZX4/2016-11-11.txt:text/plain;IEEE Xplore Abstract Record:/home/sgeorgiou/.zotero/zotero/ut65aj2m.default/zotero/storage/R2UJIGX7/7723731.html:text/html}


@inproceedings{oliveira_study_2017,
	address = {Piscataway, NJ, USA},
	series = {{MSR} '17},
	title = {A {Study} on the {Energy} {Consumption} of {Android} {App} {Development} {Approaches}},
	isbn = {978-1-5386-1544-7},
	url = {https://doi.org/10.1109/MSR.2017.66},
	doi = {10.1109/MSR.2017.66},
	abstract = {Mobile devices have become ubiquitous in the recent years, but the complaints about energy consumption are almost universal. On Android, the developer can choose among several different approaches to develop an app. In this paper, we investigate the impact of some of the most popular development approaches on the energy consumption of Android apps. Our study uses a testbed of 33 different benchmarks and 3 applications on 5 different devices to compare the energy efficiency and performance of the most commonly used approaches to develop apps on Android: Java, JavaScript, and C/C++ (through the NDK tools). In our experiments, Javascript was more energy-efficient in 75\% of all benchmarks, while their Java counterparts consume up to 36.27x more energy (median of 1.97x). On the other hand, both Java and C++ outperformed JavaScript in most of the benchmarks. Based on these results, four Java applications were re-engineered to use a combination of Java and either JavaScript or C/C++ functions. For one of the apps, the hybrid solution using Java and C++ spent 10x less time and almost 100x less energy than a pure Java solution. The results were not uniform, however. For another app, when we restructured its implementation so as to minimize cross-language method invocations, the hybrid solution using Java and C++ took 8\% longer to execute and consumed 11\% more energy than a hybrid solution using Java and JavaScript. Since most Android apps are written solely in Java, the results of this study indicate that leveraging a combination of approaches may lead to non-negligible improvements in energy-efficiency and performance.},
	booktitle = {Proceedings of the 14th {International} {Conference} on {Mining} {Software} {Repositories}},
	publisher = {IEEE Press},
	author = {Oliveira, Wellington and Oliveira, Renato and Castor, Fernando},
	year = {2017},
	pages = {42--52},
	file = {ACM Full Text PDF:/home/sgeorgiou/.zotero/zotero/ut65aj2m.default/zotero/storage/N8JUJ955/Oliveira et al. - 2017 - A Study on the Energy Consumption of Android App D.pdf:application/pdf}


@inproceedings{lima_haskell_2016,
	title = {Haskell in {Green} {Land}: {Analyzing} the {Energy} {Behavior} of a {Purely} {Functional} {Language}},
	volume = {1},
	shorttitle = {Haskell in {Green} {Land}},
	doi = {10.1109/SANER.2016.85},
	abstract = {Recent work has studied the effect that factors such as code obfuscation, refactorings and data types have on energy efficiency. In this paper, we attempt to shed light on the energy behavior of programs written in a lazy purely functional language, Haskell. We have conducted two empirical studies to analyze the energy efficiency of Haskell programs from two different perspectives: strictness and concurrency. Our experimental space exploration comprises more than 2000 configurations and 20000 executions. We found out that small changes can make a big difference in terms of energy consumption. For example, in one of our benchmarks, under a specific configuration, choosing one data sharing primitive (MVar) over another (TMVar) can yield 60\% energy savings. In another benchmark, the latter primitive can yield up to 30\% energy savings over the former. Thus, tools that support developers in quickly refactoring a program to switch between different primitives can be of great help if energy is a concern. In addition, the relationship between energy consumption and performance is not always clear. In sequential benchmarks, high performance is an accurate proxy for low energy consumption. However, for one of our concurrent benchmarks, the variants with the best performance also exhibited the worst energy consumption. To support developers in better understanding this complex relationship, we have extended two existing performance analysis tools to also collect and present data about energy consumption.},
	booktitle = {2016 {IEEE} 23rd {International} {Conference} on {Software} {Analysis}, {Evolution}, and {Reengineering} ({SANER})},
	author = {Lima, L. G. and Soares-Neto, F. and Lieuthier, P. and Castor, F. and Melfe, G. and Fernandes, J. P.},
	month = mar,
	year = {2016},
	keywords = {Benchmark testing, concurrency control, concurrency property, concurrent benchmark, Concurrent computing, Current measurement, data sharing primitive, Empirical study, Energy consumption, Energy efficiency, energy efficiency analysis, Energy measurement, energy savings, functional languages, functional programming, green computing, Haskell programs, lazy-purely functional language, program energy behavior analysis, program refactoring, refactoring, Software, strictness property, Time measurement, TMVar},
	pages = {517--528},
	file = {07476671.pdf:files/1041/07476671.pdf:application/pdf;IEEE Xplore Abstract Record:files/1040/7476671.html:text/html}
}


@inproceedings{magalhaes_how_2016,
	title = {How {Programming} {Languages} and {Paradigms} {Affect} {Performance} and {Energy} in {Multithreaded} {Applications}},
	doi = {10.1109/SBESC.2016.019},
	abstract = {Considering that multithreaded applications may be implemented using several programming languages and paradigms, in this work we show how they influence performance, energy consumption and energy-delay product (EDP). For that, we evaluate a subset of the NAS Parallel Benchmark, implemented in both procedural (C) and object-oriented programming languages (C++ and Java). We also investigate the overhead of Virtual Machines (VM) and the improvement that the Just-In-Time (JIT) compiler may provide. We show that the procedural language has better scalability than object-oriented ones, i.e., the improvements in performance, EDP, and energy savings are better in C than in C++ and Java as the number of threads increases; and that C can be up to 76 times faster than Java, even with the JIT mechanism enabled. We also demonstrate that the Java JIT effectiveness may vary according to the benchmark (1.16 and 23.97 times in performance and 1.19 to 19.85 times in energy consumption compared to the VM without JIT); and when it reaches good optimization levels, it can be up to 23\% faster, consuming 42\% less energy, and having an EDP 58\% lower than C++.},
	booktitle = {2016 {VI} {Brazilian} {Symposium} on {Computing} {Systems} {Engineering} ({SBESC})},
	author = {Magalhães, G. G. and Sartor, A. L. and Lorenzon, A. F. and Navaux, P. O. A. and Beck, A. C. S.},
	month = nov,
	year = {2016},
	keywords = {Benchmark testing, C++, C++ language, C++ languages, Computer architecture, EDP, Energy consumption, energy-delay product, energy savings, Java, Java JIT, JIT compiler, just-in-time compiler, multithreaded applications, multi-threading, NAS parallel benchmark, object-oriented languages, object-oriented programming, object-oriented programming languages, performance and energy evaluation, power aware computing, program compilers, Programming, programming languages, programming paradigms, software performance evaluation, virtual machines, Virtual machining, VM},
	pages = {71--78},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\sgeorgiou\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b8nbhwih.default\\zotero\\storage\\IN6SMN7A\\7828287.html:text/html;Magalhães et al. - 2016 - How Programming Languages and Paradigms Affect Per.pdf:C\:\\Users\\sgeorgiou\\Dropbox\\PhD - Energy Efficiecny in Cloud Computing Systems\\Zotero Bib\\Software Engineering\\Magalhães et al. - 2016 - How Programming Languages and Paradigms Affect Per.pdf:application/pdf}
}

@INPROCEEDINGS{7321198, 
author={M. Rashid and L. Ardito and M. Torchiano}, 
booktitle={2015 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)}, 
title={Energy Consumption Analysis of Algorithms Implementations}, 
year={2015}, 
pages={1-4}, 
keywords={energy consumption;mobile computing;programming languages;sorting;ARM assembly language;ARM based device;energy consumption analysis;energy efficiency;hardware design;mobile devices;programming languages;software design;sorting algorithms implementation;Algorithm design and analysis;Energy consumption;Java;Power demand;Software algorithms;Sorting}, 
doi={10.1109/ESEM.2015.7321198}, 
ISSN={1949-3770}, 
month={Oct},}

@inproceedings{PCL14,
 author = {Pinto, Gustavo and Castor, Fernando and Liu, Yu David},
 title = {Mining Questions About Software Energy Consumption},
 booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
 series = {MSR 2014},
 year = {2014},
 isbn = {978-1-4503-2863-0},
 location = {Hyderabad, India},
 pages = {22--31},
 numpages = {10},
 doi = {10.1145/2597073.2597110},
 acmid = {2597110},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Practitioners, Q\&A, Software Energy Consumption},
} 

@inproceedings{SDF11,
 author = {Sampson, Adrian and Dietl, Werner and Fortuna, Emily and Gnanapragasam, Danushen and Ceze, Luis and Grossman, Dan},
 title = {Ener{J}: Approximate Data Types for Safe and General Low-power Computation},
 booktitle = {Proceedings of the 32Nd ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '11},
 year = {2011},
 isbn = {978-1-4503-0663-8},
 location = {San Jose, California, USA},
 pages = {164--174},
 numpages = {11},
 doi = {10.1145/1993498.1993518},
 acmid = {1993518},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {accuracy-aware computing, critical data, energy, power-aware computing, soft errors},
}



@inproceedings{MR13,
 author = {Meyerovich, Leo A. and Rabkin, Ariel S.},
 title = {Empirical Analysis of Programming Language Adoption},
 booktitle = {Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages \&\#38; Applications},
 series = {OOPSLA '13},
 year = {2013},
 isbn = {978-1-4503-2374-1},
 location = {Indianapolis, Indiana, USA},
 pages = {1--18},
 numpages = {18},
 doi = {10.1145/2509136.2509515},
 acmid = {2509515},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {programming language adoption, survey research},
} 

@INPROCEEDINGS{PFW11,
author={G. P. Perrucci and F. H. P. Fitzek and J. Widmer},
booktitle={2011 IEEE 73rd Vehicular Technology Conference (VTC Spring)},
title={Survey on Energy Consumption Entities on the Smartphone Platform},
year={2011},
pages={1-6},
keywords={mobile handsets;protocols;MP3 player;Moore's law discrepancy;Web page;energy consumption entiy;energy limitation;energy-hungry services;mobile devices;mobile phone battery;mobile protocols;mobile systems;multiple air interfaces;smartphone platform;wireless air interfaces;wireless data rate;Batteries;Bluetooth;Energy consumption;Energy measurement;Mobile handsets;Power demand;Switches},
doi={10.1109/VETECS.2011.5956528},
ISSN={1550-2252},
month={May},}

